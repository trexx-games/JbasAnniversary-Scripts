{
  "address": "0xb631a0d393361d2eCA1151D82482C5fb5Ef0254a",
  "abi": [
    {
      "inputs": [],
      "name": "PRBMathSD59x18__AbsInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__PowuOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FRClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "soldPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "allocatedFR",
          "type": "uint256"
        }
      ],
      "name": "FRDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOfOTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagerCut",
          "type": "uint256"
        }
      ],
      "name": "changeManagerCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLicenseName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLicenseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "list",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "numGenerations",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "rewardRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ORatio",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "license",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "releaseFR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "releaseOR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "retrieveAllottedFR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "retrieveAllottedOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "retrieveFRInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "numGenerations",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "percentOfProfit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successiveRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastSoldPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ownerAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "addressesInFR",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "retrieveListInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveManagerInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "untradingManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "managerCut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "retrieveORInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ORatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRatio",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferOTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x776fcb82f498c259024c07650b14aab5f9bd570a5d0f117069d184a9f1d2e069",
  "receipt": {
    "to": null,
    "from": "0xD43bCD14529099f141897CBb522Ef6197f4b1Cae",
    "contractAddress": "0xb631a0d393361d2eCA1151D82482C5fb5Ef0254a",
    "transactionIndex": 28,
    "gasUsed": "4363468",
    "logsBloom": "0x
    "blockHash": "0x8c45e4af6b232fb929b249a837369298ac31948c0d267d56a59e29ff69c97d1a",
    "transactionHash": "0x776fcb82f498c259024c07650b14aab5f9bd570a5d0f117069d184a9f1d2e069",
    "logs": [],
    "blockNumber": 7841615,
    "cumulativeGasUsed": "8079378",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8f1572eef8a79e37811d4889f88af51f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PRBMathSD59x18__AbsInputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__PowuOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FRClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"soldPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"allocatedFR\",\"type\":\"uint256\"}],\"name\":\"FRDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfOTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagerCut\",\"type\":\"uint256\"}],\"name\":\"changeManagerCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLicenseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLicenseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"numGenerations\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rewardRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ORatio\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"license\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseFR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseOR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"retrieveAllottedFR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"retrieveAllottedOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"retrieveFRInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"numGenerations\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percentOfProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successiveRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSoldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addressesInFR\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"retrieveListInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveManagerInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"untradingManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"managerCut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"retrieveORInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ORatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRatio\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"operator\":\"address to be approved\",\"tokenId\":\"token to approve\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"quantity of tokens held\"}},\"getApproved(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"address approved to spend token\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"token to query\"},\"returns\":{\"_0\":\"token owner\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"data payload\",\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address to be approved\",\"status\":\"approval status\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"position in global token list to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"position in owner's token list to query\",\"owner\":\"token holder to query\"},\"returns\":{\"_0\":\"id of retrieved token\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"total supply\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"sender of token\",\"to\":\"receiver of token\",\"tokenId\":\"token id\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathSD59x18__AbsInputTooSmall()\":[{\"notice\":\"Emitted when the input is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMathSD59x18__PowuOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"grant approval to given account to spend token\"},\"balanceOf(address)\":{\"notice\":\"query the balance of given address\"},\"getApproved(uint256)\":{\"notice\":\"get approval status for given token\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"name()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"ownerOf(uint256)\":{\"notice\":\"query the owner of given token\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"transfer token between given addresses, checking for ERC721Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given account to spend all tokens held by sender\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"symbol()\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"tokenByIndex(uint256)\":{\"notice\":\"get token at given internal storage index\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"get token of given owner at given internal storage index\"},\"tokenURI(uint256)\":{\"notice\":\"inheritdoc IERC721Metadata\"},\"totalSupply()\":{\"notice\":\"get total token supply\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/unFacet.sol\":\"unFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@prb/math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"@prb/math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"@prb/math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc2f46bfe115615fe1453ba72b1ae574e0ad366a7c1290930247ddc401beed861\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x4b7e18fa050b73c05c5fa3142a781f4d3c39350ee10ceb11001d53c36128aa5f\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41fd520e7dcfe254d7a2bd9463d661a481c3b55ba4d508c1dcbc071ea7777fba\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\nimport { IERC721Internal } from './IERC721Internal.sol';\\n\\n/**\\n * @title ERC721 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721 is IERC721Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given address\\n     * @return balance quantity of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice query the owner of given token\\n     * @param tokenId token to query\\n     * @return owner token owner\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer token between given addresses, without checking for ERC721Receiver implementation if applicable\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId token id\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice grant approval to given account to spend token\\n     * @param operator address to be approved\\n     * @param tokenId token to approve\\n     */\\n    function approve(address operator, uint256 tokenId) external payable;\\n\\n    /**\\n     * @notice get approval status for given token\\n     * @param tokenId token to query\\n     * @return operator address approved to spend token\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given account to spend all tokens held by sender\\n     * @param operator address to be approved\\n     * @param status approval status\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return status whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool status);\\n}\\n\",\"keccak256\":\"0x65682d679d089e5b26dabb215f21b495e9cec64001f9b95ce03dcc2b1a0f36ee\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/IERC721Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC721 interface needed by internal functions\\n */\\ninterface IERC721Internal {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed operator,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x8d46d596fa0e48cdcbf8bb8d6a42120351c4d1b002156bf647f95523178cbe08\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x38ca94617ab4a4cdc08d9fed753f1b17d91a9823b36f7f485cd1ed5e5324aa8f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/ISolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Base } from './base/IERC721Base.sol';\\nimport { IERC721Enumerable } from './enumerable/IERC721Enumerable.sol';\\nimport { IERC721Metadata } from './metadata/IERC721Metadata.sol';\\n\\ninterface ISolidStateERC721 is\\n    IERC721Base,\\n    IERC721Enumerable,\\n    IERC721Metadata\\n{}\\n\",\"keccak256\":\"0x7ddc78ea710e11181bc36166473263b75fdf43c4c2c88f2308ed2d2601713364\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC165 } from '../../introspection/ERC165.sol';\\nimport { ERC721Base, ERC721BaseInternal } from './base/ERC721Base.sol';\\nimport { ERC721Enumerable } from './enumerable/ERC721Enumerable.sol';\\nimport { ERC721Metadata } from './metadata/ERC721Metadata.sol';\\nimport { ISolidStateERC721 } from './ISolidStateERC721.sol';\\n\\n/**\\n * @title SolidState ERC721 implementation, including recommended extensions\\n */\\nabstract contract SolidStateERC721 is\\n    ISolidStateERC721,\\n    ERC721Base,\\n    ERC721Enumerable,\\n    ERC721Metadata,\\n    ERC165\\n{\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external approve function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        require(value == 0, 'ERC721: payable approve calls not supported');\\n        super._handleApproveMessageValue(operator, tokenId, value);\\n    }\\n\\n    /**\\n     * @notice ERC721 hook: revert if value is included in external transfer function call\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual override {\\n        require(value == 0, 'ERC721: payable transfer calls not supported');\\n        super._handleTransferMessageValue(from, to, tokenId, value);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721BaseInternal, ERC721Metadata) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x19b65a1c6e9cc1063cf047c6238ddc13d46c1e52dd90baa81d1349b27a10584f\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { EnumerableMap } from '../../../utils/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { IERC721 } from '../IERC721.sol';\\nimport { IERC721Receiver } from '../IERC721Receiver.sol';\\nimport { IERC721Base } from './IERC721Base.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\nimport { ERC721BaseInternal } from './ERC721BaseInternal.sol';\\n\\n/**\\n * @title Base ERC721 implementation, excluding optional extensions\\n */\\nabstract contract ERC721Base is IERC721Base, ERC721BaseInternal {\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _isApprovedForAll(account, operator);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        require(\\n            _isApprovedOrOwner(msg.sender, tokenId),\\n            'ERC721: transfer caller is not owner or approved'\\n        );\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public payable {\\n        _handleTransferMessageValue(from, to, tokenId, msg.value);\\n        require(\\n            _isApprovedOrOwner(msg.sender, tokenId),\\n            'ERC721: transfer caller is not owner or approved'\\n        );\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function approve(address operator, uint256 tokenId) public payable {\\n        _handleApproveMessageValue(operator, tokenId, msg.value);\\n        address owner = ownerOf(tokenId);\\n        require(operator != owner, 'ERC721: approval to current owner');\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            'ERC721: approve caller is not owner nor approved for all'\\n        );\\n        _approve(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     */\\n    function setApprovalForAll(address operator, bool status) public {\\n        require(operator != msg.sender, 'ERC721: approve to caller');\\n        ERC721BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0x335f52a240a9c0e1f182f7963c7c2815334c60514aa76cbca293d3df13c594b4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { EnumerableMap } from '../../../utils/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { IERC721Internal } from '../IERC721Internal.sol';\\nimport { IERC721Receiver } from '../IERC721Receiver.sol';\\nimport { ERC721BaseStorage } from './ERC721BaseStorage.sol';\\n\\n/**\\n * @title Base ERC721 internal functions\\n */\\nabstract contract ERC721BaseInternal is IERC721Internal {\\n    using ERC721BaseStorage for ERC721BaseStorage.Layout;\\n    using AddressUtils for address;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function _balanceOf(address account)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            'ERC721: balance query for the zero address'\\n        );\\n        return ERC721BaseStorage.layout().holderTokens[account].length();\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        address owner = ERC721BaseStorage.layout().tokenOwners.get(tokenId);\\n        require(owner != address(0), 'ERC721: invalid owner');\\n        return owner;\\n    }\\n\\n    function _getApproved(uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (address)\\n    {\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        require(\\n            l.exists(tokenId),\\n            'ERC721: approved query for nonexistent token'\\n        );\\n\\n        return l.tokenApprovals[tokenId];\\n    }\\n\\n    function _isApprovedForAll(address account, address operator)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return ERC721BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            ERC721BaseStorage.layout().exists(tokenId),\\n            'ERC721: query for nonexistent token'\\n        );\\n\\n        address owner = _ownerOf(tokenId);\\n\\n        return (spender == owner ||\\n            _getApproved(tokenId) == spender ||\\n            _isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n\\n        require(!l.exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, '');\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = _ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        _approve(address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n        l.holderTokens[owner].remove(tokenId);\\n        l.tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            _ownerOf(tokenId) == from,\\n            'ERC721: transfer of token that is not own'\\n        );\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        _approve(address(0), tokenId);\\n\\n        ERC721BaseStorage.Layout storage l = ERC721BaseStorage.layout();\\n        l.holderTokens[from].remove(tokenId);\\n        l.holderTokens[to].add(tokenId);\\n        l.tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    function _approve(address operator, uint256 tokenId) internal virtual {\\n        ERC721BaseStorage.layout().tokenApprovals[tokenId] = operator;\\n        emit Approval(_ownerOf(tokenId), operator, tokenId);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes memory returnData = to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(to).onERC721Received.selector,\\n                msg.sender,\\n                from,\\n                tokenId,\\n                data\\n            ),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n\\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\\n        return returnValue == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called approvals for processing of included message value\\n     * @param operator beneficiary of approval\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleApproveMessageValue(\\n        address operator,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before externally called transfers for processing of included message value\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     * @param value message value\\n     */\\n    function _handleTransferMessageValue(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 value\\n    ) internal virtual {}\\n\\n    /**\\n     * @notice ERC721 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @param from sender of token\\n     * @param to receiver of token\\n     * @param tokenId id of transferred token\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xea7872d34fcd9a877a34c43b1cc2d0cc56bb580b9a3b056ae38d30ed33b5d771\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/ERC721BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../utils/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\n\\nlibrary ERC721BaseStorage {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Base');\\n\\n    struct Layout {\\n        EnumerableMap.UintToAddressMap tokenOwners;\\n        mapping(address => EnumerableSet.UintSet) holderTokens;\\n        mapping(uint256 => address) tokenApprovals;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function exists(Layout storage l, uint256 tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.tokenOwners.contains(tokenId);\\n    }\\n\\n    function totalSupply(Layout storage l) internal view returns (uint256) {\\n        return l.tokenOwners.length();\\n    }\\n\\n    function tokenOfOwnerByIndex(\\n        Layout storage l,\\n        address owner,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return l.holderTokens[owner].at(index);\\n    }\\n\\n    function tokenByIndex(Layout storage l, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (uint256 tokenId, ) = l.tokenOwners.at(index);\\n        return tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x48c6b639e88e0a10eddb810eea6251e1a6733cf4f6db53690cede8602ea78c71\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/base/IERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721 } from '../IERC721.sol';\\n\\n/**\\n * @title ERC721 base interface\\n */\\ninterface IERC721Base is IERC721 {\\n\\n}\\n\",\"keccak256\":\"0xbf1594d73a9e18af820b1c96675efa3c65b4d1219c6f3977256693deb5b7d1a8\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { EnumerableMap } from '../../../utils/EnumerableMap.sol';\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\nimport { IERC721Enumerable } from './IERC721Enumerable.sol';\\nimport { ERC721EnumerableInternal } from './ERC721EnumerableInternal.sol';\\n\\nabstract contract ERC721Enumerable is\\n    IERC721Enumerable,\\n    ERC721EnumerableInternal\\n{\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Enumerable\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        return _tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x66ca094e63ce0075efd5adf4f17a3d71c46e15dc729ebd49aa77b1ff604ab370\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/ERC721EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721BaseStorage } from '../base/ERC721BaseStorage.sol';\\n\\nabstract contract ERC721EnumerableInternal {\\n    using ERC721BaseStorage for ERC721BaseStorage.Layout;\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _totalSupply() internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().totalSupply();\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenOfOwnerByIndex(address owner, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ERC721BaseStorage.layout().tokenOfOwnerByIndex(owner, index);\\n    }\\n\\n    /**\\n     * @notice TODO\\n     */\\n    function _tokenByIndex(uint256 index) internal view returns (uint256) {\\n        return ERC721BaseStorage.layout().tokenByIndex(index);\\n    }\\n}\\n\",\"keccak256\":\"0x0649fbb609af7e5c653ec8b735504b4b374a88e6b37bcae925a36ea6e4c82ea9\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/enumerable/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IERC721Enumerable {\\n    /**\\n     * @notice get total token supply\\n     * @return total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice get token of given owner at given internal storage index\\n     * @param owner token holder to query\\n     * @param index position in owner's token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n\\n    /**\\n     * @notice get token at given internal storage index\\n     * @param index position in global token list to query\\n     * @return tokenId id of retrieved token\\n     */\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0xaf8222fd538bd03a362c61089ef7a79a23c13de2ae3919e9e2bce3cd608112c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { ERC721BaseInternal, ERC721BaseStorage } from '../base/ERC721Base.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\nimport { ERC721MetadataInternal } from './ERC721MetadataInternal.sol';\\nimport { IERC721Metadata } from './IERC721Metadata.sol';\\n\\n/**\\n * @title ERC721 metadata extensions\\n */\\nabstract contract ERC721Metadata is IERC721Metadata, ERC721MetadataInternal {\\n    using ERC721BaseStorage for ERC721BaseStorage.Layout;\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().name;\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return ERC721MetadataStorage.layout().symbol;\\n    }\\n\\n    /**\\n     * @notice inheritdoc IERC721Metadata\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        require(\\n            ERC721BaseStorage.layout().exists(tokenId),\\n            'ERC721Metadata: URI query for nonexistent token'\\n        );\\n\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721MetadataInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc74b09825152e6f65081e541f4bce40a2cd34f8aa2094a87a2a9491c269a4624\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ERC721BaseInternal } from '../base/ERC721Base.sol';\\nimport { ERC721MetadataStorage } from './ERC721MetadataStorage.sol';\\n\\n/**\\n * @title ERC721Metadata internal functions\\n */\\nabstract contract ERC721MetadataInternal is ERC721BaseInternal {\\n    /**\\n     * @notice ERC721 hook: clear per-token URI data on burn\\n     * @inheritdoc ERC721BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (to == address(0)) {\\n            delete ERC721MetadataStorage.layout().tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf2ed70c3aceead09e10f9387cce4df4a583cce42d49ec24a78cdf296048e743\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC721MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC721Metadata');\\n\\n    struct Layout {\\n        string name;\\n        string symbol;\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe220a86657018b0d498708b7d8c728042d9a41e8ac230e22d1a09b6bf866332e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC721/metadata/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC721Internal } from '../IERC721Internal.sol';\\n\\n/**\\n * @title ERC721Metadata interface\\n */\\ninterface IERC721Metadata is IERC721Internal {\\n    /**\\n     * @notice get token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice get token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2a395ee8308b1831f5f823e47db5aa8171c758dc0151a491cf39fed7fb4a4811\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71f8130712084d73c37195324325d9af09f17f0de66a76fa898dfbb573e07fb3\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Map implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableMap {\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        MapEntry[] _entries;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    function at(AddressToAddressMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (address, address)\\n    {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        address addressKey;\\n        assembly {\\n            addressKey := mload(add(key, 20))\\n        }\\n        return (addressKey, address(uint160(uint256(value))));\\n    }\\n\\n    function at(UintToAddressMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (uint256, address)\\n    {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    function contains(AddressToAddressMap storage map, address key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function contains(UintToAddressMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    function length(AddressToAddressMap storage map)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _length(map._inner);\\n    }\\n\\n    function length(UintToAddressMap storage map)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _length(map._inner);\\n    }\\n\\n    function get(AddressToAddressMap storage map, address key)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return\\n            address(\\n                uint160(\\n                    uint256(_get(map._inner, bytes32(uint256(uint160(key)))))\\n                )\\n            );\\n    }\\n\\n    function get(UintToAddressMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return\\n            _set(\\n                map._inner,\\n                bytes32(uint256(uint160(key))),\\n                bytes32(uint256(uint160(value)))\\n            );\\n    }\\n\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressToAddressMap storage map, address key)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    function remove(UintToAddressMap storage map, uint256 key)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    function _at(Map storage map, uint256 index)\\n        private\\n        view\\n        returns (bytes32, bytes32)\\n    {\\n        require(\\n            map._entries.length > index,\\n            'EnumerableMap: index out of bounds'\\n        );\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    function _contains(Map storage map, bytes32 key)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, 'EnumerableMap: nonexistent key');\\n        unchecked {\\n            return map._entries[keyIndex - 1]._value;\\n        }\\n    }\\n\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            unchecked {\\n                map._entries[keyIndex - 1]._value = value;\\n            }\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            unchecked {\\n                MapEntry storage last = map._entries[map._entries.length - 1];\\n\\n                // move last entry to now-vacant index\\n                map._entries[keyIndex - 1] = last;\\n                map._indexes[last._key] = keyIndex;\\n            }\\n\\n            // clear last index\\n            map._entries.pop();\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b02d009839d7b8c01389d9c2404befb0ea8e3e659e8f6d1771e2624813e0c36\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            'EnumerableSet: index out of bounds'\\n        );\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9646669e6b4a7fa6ed47ff8a824c3119e71b563f96a02f652f66a36881528e\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        require(value == 0, 'UintUtils: hex length insufficient');\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x4c03c6cee3d8e4d9247fd3f61c4b4a711c52d3ed4026af3ad2ab51439af6b2a5\",\"license\":\"MIT\"},\"contracts/CantBeEvil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./CantBeEvilStorage.sol\\\";\\n\\nabstract contract CantBeEvil {\\n    using CantBeEvilStorage for CantBeEvilStorage.Layout;\\n\\n    function getLicenseURI(uint256 tokenId) external view returns(string memory) {\\n        return CantBeEvilStorage._getLicenseURI(tokenId);\\n    }\\n\\n    function getLicenseName(uint256 tokenId) external view returns(string memory) {\\n        return CantBeEvilStorage._getLicenseName(tokenId);\\n    }\\n\\n    function _setTokenLicense(uint256 tokenId, uint8 license) internal {\\n        CantBeEvilStorage._setTokenLicense(tokenId, license);\\n    }\\n}\\n\",\"keccak256\":\"0xbebf16409b9a90ac99f4d20d60408433f5a3cca04d53b1e1f74b2c315960bfa6\",\"license\":\"MIT\"},\"contracts/CantBeEvilStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport {UintUtils} from \\\"@solidstate/contracts/utils/UintUtils.sol\\\";\\n\\nlibrary CantBeEvilStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"nFR.facet.contract.licenses.cant.be.evil\\\");\\n\\n    string internal constant _BASE_LICENSE_URI = \\\"ar://_D9kN1WrNWbCq55BSAGRbTB4bS3v8QAPTYmBThSbX3A/\\\";\\n\\n    enum LicenseVersion {\\n        CBE_CC0,\\n        CBE_ECR,\\n        CBE_NECR,\\n        CBE_NECR_HS,\\n        CBE_PR,\\n        CBE_PR_HS\\n    }\\n\\n    struct Layout {\\n        mapping(uint256 => uint8) tokenLicenses; // Mapping of tokenId to license\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function _setTokenLicense(uint256 tokenId, uint8 license) internal {\\n        require(license <= 6, \\\"Invalid License\\\");\\n        Layout storage l = layout();\\n        l.tokenLicenses[tokenId] = license;\\n    }\\n\\n    function _getLicenseURI(uint256 tokenId) internal view returns (string memory) {\\n        Layout storage l = layout();\\n        return string(abi.encodePacked(_BASE_LICENSE_URI, UintUtils.toString(l.tokenLicenses[tokenId])));\\n    }\\n\\n    function _getLicenseName(uint256 tokenId) internal view returns (string memory) {\\n        Layout storage l = layout();\\n        return _getLicenseVersionKeyByValue(l.tokenLicenses[tokenId]);\\n    }\\n\\n    function _getLicenseVersionKeyByValue(uint8 licenseVersion) internal pure returns (string memory) {\\n        if (uint8(LicenseVersion.CBE_CC0) == licenseVersion) return \\\"CBE_CC0\\\";\\n        if (uint8(LicenseVersion.CBE_ECR) == licenseVersion) return \\\"CBE_ECR\\\";\\n        if (uint8(LicenseVersion.CBE_NECR) == licenseVersion) return \\\"CBE_NECR\\\";\\n        if (uint8(LicenseVersion.CBE_NECR_HS) == licenseVersion) return \\\"CBE_NECR_HS\\\";\\n        if (uint8(LicenseVersion.CBE_PR) == licenseVersion) return \\\"CBE_PR\\\";\\n        else return \\\"CBE_PR_HS\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xc02fe93794fb8ecab1cc4ab22b67fea10cb26838db40b380d98938efbe4e26d9\",\"license\":\"MIT\"},\"contracts/CounterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary CounterStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"counter.storage\\\");\\n\\n    struct Layout {\\n        uint256 tokenIds;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function currentTokenId() internal view returns (uint256) {\\n        return layout().tokenIds;\\n    }\\n\\n    function incrementTokenId() internal {\\n        layout().tokenIds += 1;\\n    }\\n}\\n\",\"keccak256\":\"0x37e32ba8ca3b144e7d42f121b5fb6f21ce9e308a0fb4d51a4a04fa1d4f8602a5\",\"license\":\"MIT\"},\"contracts/InFR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@solidstate/contracts/introspection/IERC165.sol\\\";\\n\\n/*\\n *\\n * @dev Interface for the Future Rewards Token Standard.\\n *\\n * A standardized way to receive future rewards for non-fungible tokens (NFTs.)\\n *\\n */\\ninterface InFR is IERC165 {\\n\\n    event FRClaimed(address indexed account, uint256 indexed amount);\\n\\n    event FRDistributed(uint256 indexed tokenId, uint256 indexed soldPrice, uint256 indexed allocatedFR);\\n\\n    function list(uint256 tokenId, uint256 salePrice) external;\\n\\n    function unlist(uint256 tokenId) external;\\n\\n    function buy(uint256 tokenId) payable external;\\n\\n    function releaseFR(address payable account) external;\\n\\n    function retrieveFRInfo(uint256 tokenId) external returns(uint8, uint256, uint256, uint256, uint256, address[] memory);\\n\\n    function retrieveAllottedFR(address account) external returns(uint256);\\n\\n    function retrieveListInfo(uint256 tokenId) external returns(uint256, address, bool);\\n    \\n}\",\"keccak256\":\"0x31c3a566ffbf4076114f3b5be917d635aaacb5bed3b9d60cb4acc60dc1bd3697\",\"license\":\"MIT\"},\"contracts/nFR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./InFR.sol\\\";\\nimport \\\"./nFRStorage.sol\\\";\\nimport \\\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\\\";\\nimport \\\"@prb/math/contracts/PRBMathUD60x18.sol\\\";\\nimport \\\"@prb/math/contracts/PRBMathSD59x18.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nabstract contract nFR is InFR, SolidStateERC721 {\\n    using PRBMathUD60x18 for uint256;\\n    using PRBMathSD59x18 for int256;\\n\\n    function retrieveFRInfo(uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint8 numGenerations,\\n            uint256 percentOfProfit,\\n            uint256 successiveRatio,\\n            uint256 lastSoldPrice,\\n            uint256 ownerAmount,\\n            address[] memory addressesInFR\\n        )\\n    {\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n        return (l._tokenFRInfo[tokenId].numGenerations, l._tokenFRInfo[tokenId].percentOfProfit, l._tokenFRInfo[tokenId].successiveRatio, l._tokenFRInfo[tokenId].lastSoldPrice, l._tokenFRInfo[tokenId].ownerAmount, l._addressesInFR[tokenId]);\\n    }\\n\\n    function retrieveListInfo(uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256,\\n            address,\\n            bool\\n        )\\n    {\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n        return (l._tokenListInfo[tokenId].salePrice, l._tokenListInfo[tokenId].lister, l._tokenListInfo[tokenId].isListed);\\n    }\\n\\n    function retrieveAllottedFR(address account) external view virtual override returns (uint256) {\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n        return l._allottedFR[account];\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 soldPrice\\n    ) internal virtual {\\n        require(from != to, \\\"transfer to self\\\");\\n        ERC721BaseInternal._transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, \\\"\\\"), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n\\n        if (soldPrice <= l._tokenFRInfo[tokenId].lastSoldPrice) { // NFT sold for a loss, meaning no FR distribution, but we still shift generations, and update price. We return ALL of the received ETH to the msg.sender as no FR chunk was needed.\\n            l._tokenFRInfo[tokenId].lastSoldPrice = soldPrice;\\n            l._tokenFRInfo[tokenId].ownerAmount++;\\n            _shiftGenerations(to, tokenId);\\n            (bool sent, ) = payable(l._tokenListInfo[tokenId].lister).call{value: soldPrice}(\\\"\\\");\\n            require(sent, \\\"ERC5173: Failed to send msg.value to lister\\\");\\n        } else {\\n            _distributeFR(tokenId, soldPrice);\\n            l._tokenFRInfo[tokenId].lastSoldPrice = soldPrice;\\n            l._tokenFRInfo[tokenId].ownerAmount++;\\n            _shiftGenerations(to, tokenId);\\n        }\\n\\n        delete l._tokenListInfo[tokenId];\\n    }\\n\\n    function list(uint256 tokenId, uint256 salePrice) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC5173: list caller is not owner nor approved\\\");\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n\\n        l._tokenListInfo[tokenId] = nFRStorage.ListInfo(salePrice, _msgSender(), true);\\n    }\\n\\n    function unlist(uint256 tokenId) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC5173: unlist caller is not owner nor approved\\\");\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n\\n        delete l._tokenListInfo[tokenId];\\n    }\\n\\n    function buy(uint256 tokenId) public payable virtual override {\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n        require(l._tokenListInfo[tokenId].isListed == true, \\\"Token is not listed\\\");\\n        require(l._tokenListInfo[tokenId].salePrice == msg.value, \\\"salePrice and msg.value mismatch\\\");\\n\\n        _transferFrom(l._tokenListInfo[tokenId].lister, _msgSender(), tokenId, l._tokenListInfo[tokenId].salePrice);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        require(from != to, \\\"transfer to self\\\");\\n        super._transfer(from, to, tokenId);\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n\\n        if (l._tokenListInfo[tokenId].isListed == true) {\\n            delete l._tokenListInfo[tokenId];\\n        }\\n\\n        l._tokenFRInfo[tokenId].lastSoldPrice = 0;\\n        l._tokenFRInfo[tokenId].ownerAmount++;\\n        _shiftGenerations(to, tokenId);\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual override {\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n\\n        require(l._defaultFRInfo.isValid, \\\"No Default FR Info has been set\\\");\\n\\n        super._mint(to, tokenId);\\n\\n        l._tokenFRInfo[tokenId] = nFRStorage.FRInfo(l._defaultFRInfo.numGenerations, l._defaultFRInfo.percentOfProfit, l._defaultFRInfo.successiveRatio, 0, 1, true);\\n\\n        l._addressesInFR[tokenId].push(to);\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n\\n        delete l._tokenFRInfo[tokenId];\\n        delete l._addressesInFR[tokenId];\\n        delete l._tokenListInfo[tokenId];\\n    }\\n\\n    function _mint(\\n        address to,\\n        uint256 tokenId,\\n        uint8 numGenerations,\\n        uint256 percentOfProfit,\\n        uint256 successiveRatio\\n    ) internal virtual {\\n        require(numGenerations > 0 && percentOfProfit > 0 && percentOfProfit <= 1e18 && successiveRatio > 0, \\\"Invalid Data Passed\\\");\\n\\n        ERC721BaseInternal._mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, \\\"\\\"), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n\\n        l._tokenFRInfo[tokenId] = nFRStorage.FRInfo(numGenerations, percentOfProfit, successiveRatio, 0, 1, true);\\n\\n        l._addressesInFR[tokenId].push(to);\\n    }\\n\\n    function _distributeFR(uint256 tokenId, uint256 soldPrice) internal virtual {\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n        uint256 profit = soldPrice - l._tokenFRInfo[tokenId].lastSoldPrice;\\n        uint256[] memory FR = _calculateFR(profit, l._tokenFRInfo[tokenId].percentOfProfit, l._tokenFRInfo[tokenId].successiveRatio, l._tokenFRInfo[tokenId].ownerAmount, l._tokenFRInfo[tokenId].numGenerations);\\n\\n        for (uint owner = 0; owner < FR.length; owner++) {\\n            l._allottedFR[l._addressesInFR[tokenId][owner]] += FR[owner];\\n        }\\n\\n        uint256 allocatedFR = 0;\\n\\n        for (uint reward = 0; reward < FR.length; reward++) {\\n            allocatedFR += FR[reward];\\n        }\\n\\n        (bool sent, ) = payable(l._tokenListInfo[tokenId].lister).call{value: soldPrice - allocatedFR}(\\\"\\\");\\n        require(sent, \\\"Failed to send ETH after FR distribution to lister\\\");\\n\\n        emit FRDistributed(tokenId, soldPrice, allocatedFR);\\n    }\\n\\n    function _shiftGenerations(address to, uint256 tokenId) internal virtual {\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n        if (l._addressesInFR[tokenId].length < l._tokenFRInfo[tokenId].numGenerations) { // We just want to push to the array\\n            l._addressesInFR[tokenId].push(to);\\n        } else { // We want to remove the first element in the array and then push to the end of the array\\n            for (uint i = 0; i < l._addressesInFR[tokenId].length-1; i++) {\\n                l._addressesInFR[tokenId][i] = l._addressesInFR[tokenId][i+1];\\n            }\\n\\n            l._addressesInFR[tokenId].pop();\\n\\n            l._addressesInFR[tokenId].push(to);\\n        }\\n    }\\n\\n    function _setDefaultFRInfo(\\n        uint8 numGenerations,\\n        uint256 percentOfProfit,\\n        uint256 successiveRatio\\n    ) internal virtual {\\n        require(numGenerations > 0 && percentOfProfit > 0 && percentOfProfit <= 1e18 && successiveRatio > 0, \\\"Invalid Data Passed\\\");\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n\\n        l._defaultFRInfo.numGenerations = numGenerations;\\n        l._defaultFRInfo.percentOfProfit = percentOfProfit;\\n        l._defaultFRInfo.successiveRatio = successiveRatio;\\n        l._defaultFRInfo.isValid = true;\\n    }\\n\\n    function releaseFR(address payable account) public virtual override {\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n        require(l._allottedFR[account] > 0, \\\"No FR Payment due\\\");\\n\\n        uint256 FRAmount = l._allottedFR[account];\\n\\n        l._allottedFR[account] = 0;\\n\\n        (bool sent, ) = account.call{value: FRAmount}(\\\"\\\");\\n        require(sent, \\\"Failed to release FR\\\");\\n\\n        emit FRClaimed(account, FRAmount);\\n    }\\n\\n    function _calculateFR(\\n        uint256 totalProfit,\\n        uint256 buyerReward,\\n        uint256 successiveRatio,\\n        uint256 ownerAmount,\\n        uint256 windowSize\\n    ) internal pure virtual returns (uint256[] memory) {\\n        uint256 n = Math.min(ownerAmount, windowSize);\\n        uint256[] memory FR = new uint256[](n);\\n\\n        for (uint256 i = 1; i < n + 1; i++) {\\n            uint256 pi = 0;\\n\\n            if (successiveRatio != 1e18) {\\n                int256 v1 = 1e18 - int256(successiveRatio).powu(n);\\n                int256 v2 = int256(successiveRatio).powu(i - 1);\\n                int256 v3 = int256(totalProfit).mul(int256(buyerReward));\\n                int256 v4 = v3.mul(1e18 - int256(successiveRatio));\\n                pi = uint256(v4 * v2 / v1);\\n            } else {\\n                pi = totalProfit.mul(buyerReward).div(n);\\n            }\\n\\n            FR[n - i] = pi;\\n        }\\n\\n        return FR;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0x38e385f05081da11ea8291f8665cdf109097e99f94bc9b411c5d846548ea7e65\",\"license\":\"MIT\"},\"contracts/nFRStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary nFRStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"nFR.contract.storage\\\");\\n\\n    struct FRInfo {\\n        uint8 numGenerations; //  Number of generations corresponding to that Token ID\\n        uint256 percentOfProfit; // Percent of profit allocated for FR, scaled by 1e18\\n        uint256 successiveRatio; // The common ratio of successive in the geometric sequence, used for distribution calculation\\n        uint256 lastSoldPrice; // Last sale price in ETH mantissa\\n        uint256 ownerAmount; // Amount of owners the Token ID has seen\\n        bool isValid; // Updated by contract and signifies if an FR Info for a given Token ID is valid\\n    }\\n\\n    struct ListInfo {\\n        uint256 salePrice; // ETH mantissa of the listed selling price\\n        address lister; // Owner/Lister of the Token\\n        bool isListed; // Boolean indicating whether the Token is listed or not\\n    }\\n\\n    struct Layout {\\n        FRInfo _defaultFRInfo;\\n        \\n        mapping(uint256 => FRInfo) _tokenFRInfo;\\n\\n        mapping(uint256 => address[]) _addressesInFR;\\n\\n        mapping(address => uint256) _allottedFR;\\n\\n        mapping(uint256 => ListInfo) _tokenListInfo;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef56cc90dd25d22b3c2249ddfc689ac127ca3a6713fadd89930eb99ced8e3b30\",\"license\":\"MIT\"},\"contracts/unFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport {SolidStateERC721} from \\\"@solidstate/contracts/token/ERC721/SolidStateERC721.sol\\\";\\nimport {CounterStorage} from \\\"./CounterStorage.sol\\\";\\nimport {ERC721MetadataStorage} from \\\"@solidstate/contracts/token/ERC721/metadata/ERC721MetadataStorage.sol\\\";\\n\\nimport \\\"@prb/math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport \\\"./nFR.sol\\\";\\nimport \\\"./unFacetStorage.sol\\\";\\n\\nimport \\\"./CantBeEvil.sol\\\";\\n\\ncontract unFacet is nFR, CantBeEvil {\\n    using CounterStorage for CounterStorage.Layout;\\n\\n    using PRBMathUD60x18 for uint256;\\n\\n    function retrieveORInfo(uint256 tokenId) external view returns (uint256 ORatio, uint256 rewardRatio, address[] memory holders) {\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n        return (f._oTokens[tokenId].ORatio, f._oTokens[tokenId].rewardRatio, f._oTokens[tokenId].holders);\\n    }\\n\\n    function retrieveAllottedOR(address account) external view returns (uint256) {\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n        return (f._allottedOR[account]);\\n    }\\n\\n    function balanceOfOTokens(uint256 tokenId, address account) external view returns (uint256) {\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n        return (f._oTokens[tokenId].amount[account]);\\n    }\\n\\n    function mint(\\n        address recipient,\\n        uint8 numGenerations,\\n        uint256 rewardRatio,\\n        uint256 ORatio,\\n        uint8 license,\\n        string memory tokenURI\\n    ) external returns(uint256 tokenId) {\\n        require(numGenerations >= 5 && numGenerations <= 20, \\\"numGenerations must be between 5 and 20\\\");\\n        require(rewardRatio >= 5e16 && rewardRatio <= 5e17, \\\"rewardRatio must be between 5% and 50%\\\");\\n        require(ORatio >= 5e16 && ORatio <= 5e17, \\\"ORatio must be between 5% and 50%\\\");\\n\\n        uint256 successiveRatio = ((uint256(numGenerations) * 1e18).div((uint256(numGenerations) * 1e18) - 1.618e18)) / 100 * 100; // by ( / 100 * 100) we are effectively rounding down the successive ratio. The division takes advantage of Solidity's automatic decimal truncation, effectively removing the last 2 digits, then the multiplication adds those 2 digits back as 0s.\\n        uint256 percentOfProfit = rewardRatio.mul(1e18 - ORatio);\\n\\n        ORatio = rewardRatio.mul(ORatio);\\n\\n        CounterStorage.incrementTokenId();\\n\\n        uint256 newItemId = CounterStorage.layout().tokenIds;\\n        _distributeOTokens(newItemId, recipient, ORatio, rewardRatio);\\n        _mint(recipient, newItemId, numGenerations, percentOfProfit, successiveRatio);\\n        \\n        _setTokenURI(newItemId, tokenURI);\\n        _setTokenLicense(newItemId, license);\\n\\n        tokenId = newItemId;\\n    }\\n\\n    function releaseOR(address payable account) external {\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n        require(f._allottedOR[account] > 0, \\\"No OR Payment due\\\");\\n\\n        uint256 ORAmount = f._allottedOR[account];\\n\\n        f._allottedOR[account] = 0;\\n\\n        (bool sent, ) = account.call{value: ORAmount}(\\\"\\\");\\n        require(sent, \\\"Failed to release OR\\\");\\n    }\\n\\n    function transferOTokens(uint256 tokenId, address recipient, uint256 amount) external {\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n\\n        require(recipient != address(0), \\\"transfer to the zero address\\\");\\n        require(recipient != _msgSender(), \\\"transfer to self\\\");\\n        require(amount > 0, \\\"transfer amount is 0\\\");\\n\\n        uint256 fromBalance = f._oTokens[tokenId].amount[_msgSender()];\\n        require(fromBalance >= amount, \\\"transfer amount exceeds balance\\\");\\n\\n        unchecked {\\n             f._oTokens[tokenId].amount[_msgSender()] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by 1e18 (100%), and is preserved by\\n            // decrementing then incrementing.\\n             f._oTokens[tokenId].amount[recipient] += amount;\\n        }\\n\\n        if (fromBalance - amount == 0) {\\n            for (uint256 i = 0; i < f._oTokens[tokenId].holders.length; i++) {\\n                if (f._oTokens[tokenId].holders[i] == _msgSender()) {\\n                    f._oTokens[tokenId].holders[i] = recipient;\\n                    return;\\n                }\\n            }\\n            revert(\\\"Not Found\\\");\\n        } else {\\n            f._oTokens[tokenId].holders.push(recipient);\\n        }\\n    }\\n\\n    function _distributeOTokens(uint256 tokenId, address recipient, uint256 ORatio, uint256 rewardRatio) internal {\\n        unFacetStorage.Layout storage l = unFacetStorage.layout();\\n        \\n        l._oTokens[tokenId].ORatio = ORatio;\\n        l._oTokens[tokenId].rewardRatio = rewardRatio;\\n        l._oTokens[tokenId].holders = [l.untradingManager, recipient];\\n        l._oTokens[tokenId].amount[l.untradingManager] = l.managerCut;\\n        l._oTokens[tokenId].amount[recipient] = (1e18 - l.managerCut);\\n    }\\n\\n    function _distributeOR(uint256 tokenId, uint256 soldPrice) internal {\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n\\n        uint256 profit = soldPrice - l._tokenFRInfo[tokenId].lastSoldPrice;\\n        uint256 ORAvailable = profit.mul(f._oTokens[tokenId].ORatio);\\n\\n        for (uint holder = 0; holder < f._oTokens[tokenId].holders.length; holder++) {\\n            address holderAddress = f._oTokens[tokenId].holders[holder];\\n            f._allottedOR[holderAddress] += ORAvailable.mul(f._oTokens[tokenId].amount[holderAddress]);\\n        }\\n    }\\n\\n    function _distributeFR(uint256 tokenId, uint256 soldPrice) internal override {\\n        _distributeOR(tokenId, soldPrice);\\n\\n        nFRStorage.Layout storage l = nFRStorage.layout();\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n\\n        uint256 profit = soldPrice - l._tokenFRInfo[tokenId].lastSoldPrice;\\n        uint256[] memory FR = _calculateFR(profit, l._tokenFRInfo[tokenId].percentOfProfit, l._tokenFRInfo[tokenId].successiveRatio, l._tokenFRInfo[tokenId].ownerAmount, l._tokenFRInfo[tokenId].numGenerations);\\n\\n        for (uint owner = 0; owner < FR.length; owner++) {\\n            l._allottedFR[l._addressesInFR[tokenId][owner]] += FR[owner];\\n        }\\n        \\n        (bool sent, ) = payable(l._tokenListInfo[tokenId].lister).call{value: soldPrice - (profit.mul(f._oTokens[tokenId].rewardRatio))}(\\\"\\\");\\n        require(sent, \\\"Failed to send ETH after OR and FR distribution to lister\\\");\\n\\n        emit FRDistributed(tokenId, soldPrice, profit.mul(l._tokenFRInfo[tokenId].percentOfProfit));\\n    }\\n\\n    function _burn(uint256 tokenId) internal override {\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n        delete f._oTokens[tokenId];\\n        super._burn(tokenId);\\n    }\\n\\n    /*\\n    function mintERC721(address recipient, string memory tokenURI) external {\\n        CounterStorage.incrementTokenId();\\n\\n        uint256 newItemId = CounterStorage.layout().tokenIds;\\n        _mint(recipient, newItemId);\\n        _setTokenURI(newItemId, tokenURI);\\n    }\\n\\n    function setDefaultFRInfo(\\n        uint8 numGenerations,\\n        uint256 percentOfProfit,\\n        uint256 successiveRatio\\n    ) external {\\n        _setDefaultFRInfo(numGenerations, percentOfProfit, successiveRatio);\\n    }\\n\\n    function burnNFT(uint256 tokenId) external {\\n        _burn(tokenId);\\n    }\\n    */\\n\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {\\n        ERC721MetadataStorage.Layout storage l = ERC721MetadataStorage.layout();\\n        l.tokenURIs[tokenId] = tokenURI;\\n    }\\n\\n    function retrieveManagerInfo() view external returns (address untradingManager, uint256 managerCut) {\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n        return (f.untradingManager, f.managerCut);\\n    }\\n\\n    function changeManagerCut(uint256 newManagerCut) external {\\n        unFacetStorage.Layout storage f = unFacetStorage.layout();\\n        require(msg.sender == f.untradingManager, \\\"Caller not permitted\\\");\\n        f.managerCut = newManagerCut;\\n    }\\n}\\n\",\"keccak256\":\"0x07d924689c673e6ce0e1ec49bc01789aa4d01603f2a33714b7149199e3aea836\",\"license\":\"MIT\"},\"contracts/unFacetStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary unFacetStorage {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"unFacet.nFR.facet.contract.storage\\\");\\n\\n    struct oToken {\\n        address[] holders; // The addresses receiving the oToken cut of profit\\n        mapping(address => uint256) amount; // The amount of tokens each holder has\\n        uint256 ORatio; // The percentage of the profit\\n        uint256 rewardRatio; // The percentage of profit allocated to both FR and OR\\n    }\\n\\n    struct Layout {\\n        address untradingManager;\\n        uint256 managerCut; // This is the cut of the oTokens that the untradingManager gets\\n\\n        mapping(uint256 => oToken) _oTokens; // Mapping that represents the oToken information for a given tokenId\\n\\n        mapping(address => uint256) _allottedOR; // Mapping that represents the OR (in Ether) allotted for a given address\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x824bdf55b172675aa73cca2c32e0d8a7fa2a5dbbbaf606afc945fb8bf44f11a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614e30806100206000396000f3fe6080604052600436106101fe5760003560e01c80636352211e1161011d578063bf5a4dd3116100b0578063e985e9c51161007f578063e9d8051811610064578063e9d80518146106a5578063ec4087411461070b578063fcf0dc701461078c57600080fd5b8063e985e9c514610665578063e9c927ce1461068557600080fd5b8063bf5a4dd3146105bd578063c87b56dd146105dd578063d96a094a146105fd578063de3764681461061057600080fd5b806380039a69116100ec57806380039a691461054657806395d89b4114610575578063a22cb4651461058a578063b88d4fde146105aa57600080fd5b80636352211e1461049157806364402634146104b157806369336e4f146104d157806370a082311461052657600080fd5b806332dea195116101955780634f6ccce7116101645780634f6ccce71461039057806350fd7367146103b05780635101ab53146103d057806351a15a7b1461040257600080fd5b806332dea1951461031d5780633b21b2151461033d5780633b2af2721461035d57806342842e0e1461037d57600080fd5b806318160ddd116101d157806318160ddd146102a757806323b872dd146102ca5780632f745c59146102dd57806330bafc65146102fd57600080fd5b806301ffc9a71461020357806306fdde0314610238578063081812fc1461025a578063095ea7b314610292575b600080fd5b34801561020f57600080fd5b5061022361021e366004614657565b6107ac565b60405190151581526020015b60405180910390f35b34801561024457600080fd5b5061024d610807565b60405161022f91906146cc565b34801561026657600080fd5b5061027a6102753660046146df565b6108b8565b6040516001600160a01b03909116815260200161022f565b6102a56102a036600461470d565b6108c3565b005b3480156102b357600080fd5b506102bc610a05565b60405190815260200161022f565b6102a56102d8366004614739565b610a14565b3480156102e957600080fd5b506102bc6102f836600461470d565b610aa7565b34801561030957600080fd5b5061024d6103183660046146df565b610aba565b34801561032957600080fd5b506102a561033836600461477a565b610ac5565b34801561034957600080fd5b5061024d6103583660046146df565b610c5d565b34801561036957600080fd5b506102a5610378366004614797565b610c68565b6102a561038b366004614739565b610f83565b34801561039c57600080fd5b506102bc6103ab3660046146df565b610f9e565b3480156103bc57600080fd5b506102a56103cb3660046147be565b610fa9565b3480156103dc57600080fd5b506103f06103eb3660046146df565b6110b4565b60405161022f96959493929190614824565b34801561040e57600080fd5b5061046c61041d3660046146df565b60009081527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c29360205260409020805460019091015490916001600160a01b03821691600160a01b900460ff1690565b604080519384526001600160a01b03909216602084015215159082015260600161022f565b34801561049d57600080fd5b5061027a6104ac3660046146df565b6111c7565b3480156104bd57600080fd5b506102a56104cc36600461477a565b6111d2565b3480156104dd57600080fd5b506102bc6104ec36600461477a565b6001600160a01b031660009081527f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10fa602052604090205490565b34801561053257600080fd5b506102bc61054136600461477a565b611334565b34801561055257600080fd5b506105666105613660046146df565b61133f565b60405161022f93929190614858565b34801561058157600080fd5b5061024d611405565b34801561059657600080fd5b506102a56105a5366004614880565b611436565b6102a56105b836600461494a565b61151a565b3480156105c957600080fd5b506102a56105d83660046146df565b6115ae565b3480156105e957600080fd5b5061024d6105f83660046146df565b61167b565b6102a561060b3660046146df565b6118e8565b34801561061c57600080fd5b506102bc61062b36600461477a565b6001600160a01b031660009081527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c292602052604090205490565b34801561067157600080fd5b506102236106803660046149ca565b611a28565b34801561069157600080fd5b506102bc6106a0366004614a09565b611a77565b3480156106b157600080fd5b506102bc6106c0366004614aa0565b60009182527f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f9602090815260408084206001600160a01b039390931684526001909201905290205490565b34801561071757600080fd5b5061076d7f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f7547f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f8546001600160a01b0390911691565b604080516001600160a01b03909316835260208301919091520161022f565b34801561079857600080fd5b506102a56107a73660046146df565b611d16565b7fffffffff00000000000000000000000000000000000000000000000000000000811660009081527f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e705602052604081205460ff165b92915050565b60607f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1805461083590614ac5565b80601f016020809104026020016040519081016040528092919081815260200182805461086190614ac5565b80156108ae5780601f10610883576101008083540402835291602001916108ae565b820191906000526020600020905b81548152906001019060200180831161089157829003601f168201915b5050505050905090565b600061080182611d96565b6108ce828234611e52565b60006108d9826111c7565b9050806001600160a01b0316836001600160a01b031614156109685760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b038216148061098457506109848133611a28565b6109f65760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161095f565b610a008383611ec6565b505050565b6000610a0f611f53565b905090565b610a2083838334611f7e565b610a2a3382611ff7565b610a9c5760405162461bcd60e51b815260206004820152603060248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206f7220617070726f76656400000000000000000000000000000000606482015260840161095f565b610a00838383612132565b6000610ab38383612262565b9392505050565b60606108018261228f565b6001600160a01b03811660009081527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c29260205260409020547f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c28a90610b6b5760405162461bcd60e51b815260206004820152601160248201527f4e6f204652205061796d656e7420647565000000000000000000000000000000604482015260640161095f565b6001600160a01b0382166000818152600883016020526040808220805490839055905190929083908381818185875af1925050503d8060008114610bcb576040519150601f19603f3d011682016040523d82523d6000602084013e610bd0565b606091505b5050905080610c215760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2072656c65617365204652000000000000000000000000604482015260640161095f565b60405182906001600160a01b038616907f5a9202ceea6770814401fd72940be33fb25a4b30d55ca69183766ad7feb3e5ef90600090a350505050565b6060610801826122d0565b7f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f76001600160a01b038316610cdf5760405162461bcd60e51b815260206004820152601c60248201527f7472616e7366657220746f20746865207a65726f206164647265737300000000604482015260640161095f565b6001600160a01b038316331415610d2b5760405162461bcd60e51b815260206004820152601060248201526f3a3930b739b332b9103a379039b2b63360811b604482015260640161095f565b60008211610d7b5760405162461bcd60e51b815260206004820152601460248201527f7472616e7366657220616d6f756e742069732030000000000000000000000000604482015260640161095f565b6000848152600282016020908152604080832033845260010190915290205482811015610dea5760405162461bcd60e51b815260206004820152601f60248201527f7472616e7366657220616d6f756e7420657863656564732062616c616e636500604482015260640161095f565b6000858152600283016020908152604080832033845260010190915280822085840390556001600160a01b03861682529020805484019055610e2c8382614b16565b610f415760005b6000868152600284016020526040902054811015610ef85760008681526002840160205260409020805433919083908110610e7057610e70614b2d565b6000918252602090912001546001600160a01b03161415610ee65760008681526002840160205260409020805486919083908110610eb057610eb0614b2d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050565b80610ef081614b43565b915050610e33565b5060405162461bcd60e51b815260206004820152600960248201527f4e6f7420466f756e640000000000000000000000000000000000000000000000604482015260640161095f565b600085815260028301602090815260408220805460018101825590835291200180546001600160a01b0386166001600160a01b03199091161790555050505050565b610a008383836040518060200160405280600081525061151a565b600061080182612353565b610fb33383611ff7565b6110255760405162461bcd60e51b815260206004820152602e60248201527f455243353137333a206c6973742063616c6c6572206973206e6f74206f776e6560448201527f72206e6f7220617070726f766564000000000000000000000000000000000000606482015260840161095f565b60408051606081018252918252336020808401918252600184840181815260009687527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c2939092529290942092518355519101805492511515600160a01b0274ffffffffffffffffffffffffffffffffffffffffff199093166001600160a01b0390921691909117919091179055565b60008181527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c2906020908152604080832080546001820154600283015460038401546004909401547f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c291875285882080548751818a0281018a0190985280885289988998899889986060987f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c28a9860ff909216979096919592949093919283918301828280156111aa57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161118c575b505050505090509650965096509650965096505091939550919395565b60006108018261237f565b6001600160a01b03811660009081527f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10fa60205260409020547f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f7906112785760405162461bcd60e51b815260206004820152601160248201527f4e6f204f52205061796d656e7420647565000000000000000000000000000000604482015260640161095f565b6001600160a01b0382166000818152600383016020526040808220805490839055905190929083908381818185875af1925050503d80600081146112d8576040519150601f19603f3d011682016040523d82523d6000602084013e6112dd565b606091505b505090508061132e5760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2072656c65617365204f52000000000000000000000000604482015260640161095f565b50505050565b600061080182612404565b60008181527f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f96020908152604080832060028101546003820154825484518187028101870190955280855286956060957f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f7959290918391908301828280156113f057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113d2575b50505050509050935093509350509193909250565b60607f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b1600101805461083590614ac5565b6001600160a01b03821633141561148f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161095f565b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61152684848434611f7e565b6115303383611ff7565b6115a25760405162461bcd60e51b815260206004820152603060248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206f7220617070726f76656400000000000000000000000000000000606482015260840161095f565b61132e848484846124c2565b6115b83382611ff7565b61162a5760405162461bcd60e51b815260206004820152603060248201527f455243353137333a20756e6c6973742063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000606482015260840161095f565b60009081527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c29360205260408120908155600101805474ffffffffffffffffffffffffffffffffffffffffff19169055565b60606116a9827f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a65b90612540565b61171b5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606482015260840161095f565b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020526040812080547f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b192919061177790614ac5565b80601f01602080910402602001604051908101604052809291908181526020018280546117a390614ac5565b80156117f05780601f106117c5576101008083540402835291602001916117f0565b820191906000526020600020905b8154815290600101906020018083116117d357829003601f168201915b50505050509050600082600201805461180890614ac5565b80601f016020809104026020016040519081016040528092919081815260200182805461183490614ac5565b80156118815780601f1061185657610100808354040283529160200191611881565b820191906000526020600020905b81548152906001019060200180831161186457829003601f168201915b5050505050905080516000141561189a57509392505050565b8151156118cd5780826040516020016118b4929190614b5e565b6040516020818303038152906040529350505050919050565b806118d78661254c565b6040516020016118b4929190614b5e565b60008181527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c293602052604090206001908101547f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c28a91600160a01b90910460ff161515146119975760405162461bcd60e51b815260206004820152601360248201527f546f6b656e206973206e6f74206c697374656400000000000000000000000000604482015260640161095f565b600082815260098201602052604090205434146119f65760405162461bcd60e51b815260206004820181905260248201527f73616c65507269636520616e64206d73672e76616c7565206d69736d61746368604482015260640161095f565b6000828152600982016020526040902060018101549054611a24916001600160a01b0316903390859061267e565b5050565b6001600160a01b0380831660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093851683529290529081205460ff16610ab3565b600060058660ff1610158015611a91575060148660ff1611155b611b035760405162461bcd60e51b815260206004820152602760248201527f6e756d47656e65726174696f6e73206d757374206265206265747765656e203560448201527f20616e6420323000000000000000000000000000000000000000000000000000606482015260840161095f565b66b1a2bc2ec500008510158015611b2257506706f05b59d3b200008511155b611b945760405162461bcd60e51b815260206004820152602660248201527f726577617264526174696f206d757374206265206265747765656e203525206160448201527f6e64203530250000000000000000000000000000000000000000000000000000606482015260840161095f565b66b1a2bc2ec500008410158015611bb357506706f05b59d3b200008411155b611c255760405162461bcd60e51b815260206004820152602160248201527f4f526174696f206d757374206265206265747765656e20352520616e6420353060448201527f2500000000000000000000000000000000000000000000000000000000000000606482015260840161095f565b60006064611c6f6716744a6d6e950000611c4a60ff8b16670de0b6b3a7640000614b8d565b611c549190614b16565b611c6960ff8b16670de0b6b3a7640000614b8d565b90612942565b611c799190614bc2565b611c84906064614b8d565b90506000611ca4611c9d87670de0b6b3a7640000614b16565b8890612957565b9050611cb08787612957565b9550611cba612963565b7f0bec8ab077af1e12783ac8c970bca6dada042613c1ff87b4d0953dea6b0115fc54611ce8818b898b61299d565b611cf58a828b8587612aa4565b611cff8186612ca3565b611d098187612d05565b9998505050505050505050565b7f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f780546001600160a01b03163314611d905760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206e6f74207065726d6974746564000000000000000000000000604482015260640161095f565b60010155565b60007f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a6611dc38184612540565b611e355760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606482015260840161095f565b60009283526003016020525060409020546001600160a01b031690565b8015610a005760405162461bcd60e51b815260206004820152602b60248201527f4552433732313a2070617961626c6520617070726f76652063616c6c73206e6f60448201527f7420737570706f72746564000000000000000000000000000000000000000000606482015260840161095f565b60008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a96020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f1a8261237f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610a0f7f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a6612d0f565b8015611ff25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a2070617961626c65207472616e736665722063616c6c73206e60448201527f6f7420737570706f727465640000000000000000000000000000000000000000606482015260840161095f565b61132e565b6000612023827f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a66116a3565b6120955760405162461bcd60e51b815260206004820152602360248201527f4552433732313a20717565727920666f72206e6f6e6578697374656e7420746f60448201527f6b656e0000000000000000000000000000000000000000000000000000000000606482015260840161095f565b60006120a08361237f565b9050806001600160a01b0316846001600160a01b031614806120db5750836001600160a01b03166120d084611d96565b6001600160a01b0316145b8061212a57506001600160a01b0380821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083209388168352929052205460ff165b949350505050565b816001600160a01b0316836001600160a01b031614156121875760405162461bcd60e51b815260206004820152601060248201526f3a3930b739b332b9103a379039b2b63360811b604482015260640161095f565b612192838383612d1a565b60008181527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c293602052604090206001908101547f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c28a91600160a01b90910460ff161515141561222d5760008281526009820160205260408120908155600101805474ffffffffffffffffffffffffffffffffffffffffff191690555b600082815260068201602052604081206003810182905560040180549161225383614b43565b919050555061132e8383612f16565b6000610ab37f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a68484613120565b60008181527f958f4f9db6ce87299d2b6ad9a012c8ea9d207ed3b27d2894b9c8a6036c2271e9602081905260409091205460609190610ab39060ff16613144565b606060007f958f4f9db6ce87299d2b6ad9a012c8ea9d207ed3b27d2894b9c8a6036c2271e99050604051806060016040528060318152602001614dca6031913960008481526020839052604090205461232b9060ff1661254c565b60405160200161233c929190614b5e565b604051602081830303815290604052915050919050565b60006108017f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a6836132d9565b6000806123ac7f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a6846132ef565b90506001600160a01b0381166108015760405162461bcd60e51b815260206004820152601560248201527f4552433732313a20696e76616c6964206f776e65720000000000000000000000604482015260640161095f565b60006001600160a01b0382166124825760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161095f565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a860205260409020610801906132fb565b6124cd848484612132565b6124d984848484613305565b61132e5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606482015260840161095f565b6000610ab38383613431565b60608161258c57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156125b657806125a081614b43565b91506125af9050600a83614bc2565b9150612590565b60008167ffffffffffffffff8111156125d1576125d16148be565b6040519080825280601f01601f1916602001820160405280156125fb576020820181803683370190505b5090505b841561212a57612610600183614b16565b915061261d600a86614bd6565b612628906030614bea565b60f81b81838151811061263d5761263d614b2d565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612677600a86614bc2565b94506125ff565b826001600160a01b0316846001600160a01b031614156126d35760405162461bcd60e51b815260206004820152601060248201526f3a3930b739b332b9103a379039b2b63360811b604482015260640161095f565b6126de848484612d1a565b6126f984848460405180602001604052806000815250613305565b6127605760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606482015260840161095f565b60008281527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c29060205260409020600301547f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c28a9082116128cd5760008381526006820160205260408120600381018490556004018054916127df83614b43565b91905055506127ee8484612f16565b60008381526009820160205260408082206001015490516001600160a01b039091169084908381818185875af1925050503d806000811461284b576040519150601f19603f3d011682016040523d82523d6000602084013e612850565b606091505b50509050806128c75760405162461bcd60e51b815260206004820152602b60248201527f455243353137333a204661696c656420746f2073656e64206d73672e76616c7560448201527f6520746f206c6973746572000000000000000000000000000000000000000000606482015260840161095f565b5061290c565b6128d78383613449565b60008381526006820160205260408120600381018490556004018054916128fd83614b43565b919050555061290c8484612f16565b60009283526009016020525060408120908155600101805474ffffffffffffffffffffffffffffffffffffffffff191690555050565b6000610ab383670de0b6b3a7640000846136fb565b6000610ab383836137e2565b60017f0bec8ab077af1e12783ac8c970bca6dada042613c1ff87b4d0953dea6b0115fc8054600090612996908490614bea565b9091555050565b60008481527f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f96020818152604080842060028181018890556003820187905582518084019093527f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f780546001600160a01b0390811685528a1684860152958a905293909252612a2b926144fe565b506001808201546000878152600284016020908152604080832086546001600160a01b03168452909401905291909120819055612a7090670de0b6b3a7640000614b16565b60009586526002909101602090815260408087206001600160a01b0390961687526001909501905292909320919091555050565b60008360ff16118015612ab75750600082115b8015612acb5750670de0b6b3a76400008211155b8015612ad75750600081115b612b235760405162461bcd60e51b815260206004820152601360248201527f496e76616c696420446174612050617373656400000000000000000000000000604482015260640161095f565b612b2d85856138d7565b612b496000868660405180602001604052806000815250613305565b612bb05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606482015260840161095f565b6040805160c08101825260ff9485168152602080820194855281830193845260006060830181815260016080850181815260a086018281529a84527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c29085528684209551865460ff1990811691909b161786559751858201559551600285015551600384015594516004830155955160059091018054909516901515179093557f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c2918452918120805492830181558152919091200180546001600160a01b0319166001600160a01b0392909216919091179055565b60008281527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b46020908152604090912082517f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b19261132e929190850190614563565b611a248282613a1f565b6000610801826132fb565b826001600160a01b0316612d2d8261237f565b6001600160a01b031614612da95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e0000000000000000000000000000000000000000000000606482015260840161095f565b6001600160a01b038216612e245760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161095f565b612e2f838383613ab7565b612e3a600082611ec6565b6001600160a01b03831660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a8602052604090207f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a690612e9d9083613ac2565b506001600160a01b03831660009081526002820160205260409020612ec29083613ace565b50612ece818385613ada565b5081836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b60008181527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c29060209081526040808320547f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c291909252909120547f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c28a9160ff161115612fd9576000918252600701602090815260408220805460018101825590835291200180546001600160a01b0319166001600160a01b0392909216919091179055565b60005b6000838152600783016020526040902054612ff990600190614b16565b8110156130a1576000838152600783016020526040902061301b826001614bea565b8154811061302b5761302b614b2d565b600091825260208083209091015485835260078501909152604090912080546001600160a01b03909216918390811061306657613066614b2d565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061309981614b43565b915050612fdc565b50600082815260078201602052604090208054806130c1576130c1614c02565b60008281526020808220830160001990810180546001600160a01b0319908116909155930190935584815260078401835260408120805460018101825590825292902090910180546001600160a01b0386169216919091179055505050565b6001600160a01b0382166000908152600284016020526040812061212a9083613af0565b606060ff821661318757505060408051808201909152600781527f4342455f43433000000000000000000000000000000000000000000000000000602082015290565b600160ff831614156131cc57505060408051808201909152600781527f4342455f45435200000000000000000000000000000000000000000000000000602082015290565b600260ff8316141561321157505060408051808201909152600881527f4342455f4e454352000000000000000000000000000000000000000000000000602082015290565b600360ff8316141561325657505060408051808201909152600b81527f4342455f4e4543525f4853000000000000000000000000000000000000000000602082015290565b600460ff8316141561329b57505060408051808201909152600681527f4342455f50520000000000000000000000000000000000000000000000000000602082015290565b505060408051808201909152600981527f4342455f50525f48530000000000000000000000000000000000000000000000602082015290565b919050565b6000806132e68484613afc565b50949350505050565b6000610ab38383613b18565b6000610801825490565b60006001600160a01b0384163b61331e5750600161212a565b60006133c963150b7a0260e01b338887876040516024016133429493929190614c18565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001614d98603291396001600160a01b0388169190613ba9565b90506000818060200190518101906133e19190614c54565b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001492505050949350505050565b60008181526001830160205260408120541515610ab3565b6134538282613bb8565b60008281527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c29060205260408120600301547f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c28a917f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f7916134d29085614b16565b6000868152600685016020526040812060018101546002820154600483015492549495509293613508938693909160ff16613d29565b905060005b81518110156135a85781818151811061352857613528614b2d565b60200260200101518560080160008760070160008b8152602001908152602001600020848154811061355c5761355c614b2d565b60009182526020808320909101546001600160a01b0316835282019290925260400181208054909190613590908490614bea565b909155508190506135a081614b43565b91505061350d565b506000868152600985016020908152604080832060010154600287019092528220600301546001600160a01b03909116906135e4908590612957565b6135ee9088614b16565b604051600081818185875af1925050503d806000811461362a576040519150601f19603f3d011682016040523d82523d6000602084013e61362f565b606091505b50509050806136a65760405162461bcd60e51b815260206004820152603960248201527f4661696c656420746f2073656e6420455448206166746572204f5220616e642060448201527f465220646973747269627574696f6e20746f206c697374657200000000000000606482015260840161095f565b60008781526006860160205260409020600101546136c5908490612957565b604051879089907f0362ef0ca7c60bdd7789f855ba29ed06265c4c942f6562c9e0007dbcb1e107c790600090a450505050505050565b6000808060001985870985870292508281108382030391505080600014156137365783828161372c5761372c614bac565b0492505050610ab3565b838110613779576040517f773cc18c000000000000000000000000000000000000000000000000000000008152600481018290526024810185905260440161095f565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008080600019848609848602925082811083820303915050670de0b6b3a7640000811061383f576040517fd31b34020000000000000000000000000000000000000000000000000000000081526004810182905260240161095f565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826138795780670de0b6b3a7640000850401945050505050610801565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6001600160a01b03821661392d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161095f565b7f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a66139588183612540565b156139a55760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161095f565b6139b160008484613ab7565b6001600160a01b038316600090815260028201602052604090206139d59083613ace565b506139e1818385613ada565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b60068160ff161115613a735760405162461bcd60e51b815260206004820152600f60248201527f496e76616c6964204c6963656e73650000000000000000000000000000000000604482015260640161095f565b60007f958f4f9db6ce87299d2b6ad9a012c8ea9d207ed3b27d2894b9c8a6036c2271e96000938452602052506040909120805460ff191660ff909216919091179055565b610a00838383613e84565b6000610ab38383613e8f565b6000610ab38383613f5c565b600061212a84846001600160a01b038516613fab565b6000610ab38383614048565b6000808080613b0b86866140ce565b9097909650945050505050565b600081815260018301602052604081205480613b765760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000604482015260640161095f565b836000016001820381548110613b8e57613b8e614b2d565b90600052602060002090600202016001015491505092915050565b606061212a848460008561416b565b60008281527f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c29060205260408120600301547f7cb630d146436defe02f120e4c839c242f8b65efc3c28d82b113b73e8a81c28a917f3038aceb20aeb59f48d6bf8fd13e020bec41e77992f7e7e4e936e030912d10f791613c379085614b16565b6000868152600280850160205260408220015491925090613c59908390612957565b905060005b6000878152600285016020526040902054811015613d205760008781526002850160205260408120805483908110613c9857613c98614b2d565b60009182526020808320909101548a835260028801825260408084206001600160a01b03909216808552600192909201909252912054909150613cdc908490612957565b6001600160a01b038216600090815260038701602052604081208054909190613d06908490614bea565b90915550829150613d18905081614b43565b915050613c5e565b50505050505050565b60606000613d37848461427d565b905060008167ffffffffffffffff811115613d5457613d546148be565b604051908082528060200260200182016040528015613d7d578160200160208202803683370190505b50905060015b613d8e836001614bea565b811015613e7857600087670de0b6b3a764000014613e2d576000613db28986614293565b613dc490670de0b6b3a7640000614c71565b90506000613ddd613dd6600186614b16565b8b90614293565b90506000613deb8d8d61436e565b90506000613e0b613e048d670de0b6b3a7640000614c71565b839061436e565b905083613e188483614cb0565b613e229190614d37565b945050505050613e3e565b613e3b84611c698c8c612957565b90505b8083613e4a8487614b16565b81518110613e5a57613e5a614b2d565b60209081029190910101525080613e7081614b43565b915050613d83565b50979650505050505050565b610a00838383614465565b60008181526001830160205260408120548015613f5257835460009085906000198101908110613ec157613ec1614b2d565b9060005260206000200154905080856000016001840381548110613ee757613ee7614b2d565b6000918252602080832090910192909255918252600186019052604090208190558354849080613f1957613f19614c02565b60019003818190600052602060002001600090559055836001016000848152602001908152602001600020600090556001915050610801565b6000915050610801565b6000818152600183016020526040812054613fa357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610801565b506000610801565b600082815260018401602052604081205480614010575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610ab3565b8285600001600183038154811061402957614029614b2d565b9060005260206000209060020201600101819055506000915050610ab3565b815460009082106140a65760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840161095f565b8260000182815481106140bb576140bb614b2d565b9060005260206000200154905092915050565b81546000908190831061412e5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840161095f565b600084600001848154811061414557614145614b2d565b906000526020600020906002020190508060000154816001015492509250509250929050565b6060843b6141e15760405162461bcd60e51b815260206004820152602b60248201527f416464726573735574696c733a2066756e6374696f6e2063616c6c20746f206e60448201527f6f6e2d636f6e7472616374000000000000000000000000000000000000000000606482015260840161095f565b600080866001600160a01b031685876040516141fd9190614d65565b60006040518083038185875af1925050503d806000811461423a576040519150601f19603f3d011682016040523d82523d6000602084013e61423f565b606091505b5091509150811561425357915061212a9050565b8051156142635780518082602001fd5b8360405162461bcd60e51b815260040161095f91906146cc565b600081831061428c5781610ab3565b5090919050565b60008061429f846144a9565b905060008084600116116142bb57670de0b6b3a76400006142bd565b815b9050600184901c5b80156142f5576142d583846137e2565b925060018116156142ed576142ea82846137e2565b91505b60011c6142c5565b6001600160ff1b03821115614339576040517fffb15bcd0000000000000000000000000000000000000000000000000000000081526004810183905260240161095f565b6000808712801561434d5750856001166001145b90508061435a5782614363565b61436383614d81565b979650505050505050565b6000600160ff1b8314806143855750600160ff1b82145b156143bc576040517f3406846c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600085126143cd57846143d2565b846000035b9150600084126143e257836143e7565b836000035b905060006143f583836137e2565b90506001600160ff1b0381111561443b576040517fbf79e8d90000000000000000000000000000000000000000000000000000000081526004810182905260240161095f565b6000198087139086138082186001146144545782614459565b826000035b98975050505050505050565b6001600160a01b038216610a005760008181527f99574a7094154bb123ae6ae102096f0bf9679b85a5cd1e727aaa0ae5f132e6b460205260408120610a00916145d7565b6000600160ff1b8214156144e9576040517f741d0b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082126144f75781610801565b5060000390565b828054828255906000526020600020908101928215614553579160200282015b8281111561455357825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061451e565b5061455f929150614614565b5090565b82805461456f90614ac5565b90600052602060002090601f0160209004810192826145915760008555614553565b82601f106145aa57805160ff1916838001178555614553565b82800160010185558215614553579182015b828111156145535782518255916020019190600101906145bc565b5080546145e390614ac5565b6000825580601f106145f3575050565b601f0160209004906000526020600020908101906146119190614614565b50565b5b8082111561455f5760008155600101614615565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461461157600080fd5b60006020828403121561466957600080fd5b8135610ab381614629565b60005b8381101561468f578181015183820152602001614677565b8381111561132e5750506000910152565b600081518084526146b8816020860160208601614674565b601f01601f19169290920160200192915050565b602081526000610ab360208301846146a0565b6000602082840312156146f157600080fd5b5035919050565b6001600160a01b038116811461461157600080fd5b6000806040838503121561472057600080fd5b823561472b816146f8565b946020939093013593505050565b60008060006060848603121561474e57600080fd5b8335614759816146f8565b92506020840135614769816146f8565b929592945050506040919091013590565b60006020828403121561478c57600080fd5b8135610ab3816146f8565b6000806000606084860312156147ac57600080fd5b833592506020840135614769816146f8565b600080604083850312156147d157600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b838110156148195781516001600160a01b0316875295820195908201906001016147f4565b509495945050505050565b60ff8716815285602082015284604082015283606082015282608082015260c060a0820152600061445960c08301846147e0565b83815282602082015260606040820152600061487760608301846147e0565b95945050505050565b6000806040838503121561489357600080fd5b823561489e816146f8565b9150602083013580151581146148b357600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156148ef576148ef6148be565b604051601f8501601f19908116603f01168101908282118183101715614917576149176148be565b8160405280935085815286868601111561493057600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561496057600080fd5b843561496b816146f8565b9350602085013561497b816146f8565b925060408501359150606085013567ffffffffffffffff81111561499e57600080fd5b8501601f810187136149af57600080fd5b6149be878235602084016148d4565b91505092959194509250565b600080604083850312156149dd57600080fd5b82356149e8816146f8565b915060208301356148b3816146f8565b803560ff811681146132d457600080fd5b60008060008060008060c08789031215614a2257600080fd5b8635614a2d816146f8565b9550614a3b602088016149f8565b94506040870135935060608701359250614a57608088016149f8565b915060a087013567ffffffffffffffff811115614a7357600080fd5b8701601f81018913614a8457600080fd5b614a93898235602084016148d4565b9150509295509295509295565b60008060408385031215614ab357600080fd5b8235915060208301356148b3816146f8565b600181811c90821680614ad957607f821691505b60208210811415614afa57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614b2857614b28614b00565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614b5757614b57614b00565b5060010190565b60008351614b70818460208801614674565b835190830190614b84818360208801614674565b01949350505050565b6000816000190483118215151615614ba757614ba7614b00565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614bd157614bd1614bac565b500490565b600082614be557614be5614bac565b500690565b60008219821115614bfd57614bfd614b00565b500190565b634e487b7160e01b600052603160045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152614c4a60808301846146a0565b9695505050505050565b600060208284031215614c6657600080fd5b8151610ab381614629565b600080831283600160ff1b01831281151615614c8f57614c8f614b00565b836001600160ff1b03018313811615614caa57614caa614b00565b50500390565b60006001600160ff1b03600084136000841385830485118282161615614cd857614cd8614b00565b600160ff1b6000871286820588128184161615614cf757614cf7614b00565b60008712925087820587128484161615614d1357614d13614b00565b87850587128184161615614d2957614d29614b00565b505050929093029392505050565b600082614d4657614d46614bac565b600160ff1b821460001984141615614d6057614d60614b00565b500590565b60008251614d77818460208701614674565b9190910192915050565b6000600160ff1b8214156144f7576144f7614b0056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e74657261723a2f2f5f44396b4e3157724e576243713535425341475262544234625333763851415054596d42546853625833412fa264697066735822122065722de9230f4bcb2ea76ed3f15a5092907aa0d3abd45bae81f535690fe491b664736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "operator": "address to be approved",
          "tokenId": "token to approve"
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "quantity of tokens held"
        }
      },
      "getApproved(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "address approved to spend token"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "token to query"
        },
        "returns": {
          "_0": "token owner"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "data payload",
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address to be approved",
          "status": "approval status"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "position in global token list to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "position in owner's token list to query",
          "owner": "token holder to query"
        },
        "returns": {
          "_0": "id of retrieved token"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "total supply"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "sender of token",
          "to": "receiver of token",
          "tokenId": "token id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathSD59x18__AbsInputTooSmall()": [
        {
          "notice": "Emitted when the input is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMathSD59x18__PowuOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "grant approval to given account to spend token"
      },
      "balanceOf(address)": {
        "notice": "query the balance of given address"
      },
      "getApproved(uint256)": {
        "notice": "get approval status for given token"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "name()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "ownerOf(uint256)": {
        "notice": "query the owner of given token"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "transfer token between given addresses, checking for ERC721Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given account to spend all tokens held by sender"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "symbol()": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "tokenByIndex(uint256)": {
        "notice": "get token at given internal storage index"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "get token of given owner at given internal storage index"
      },
      "tokenURI(uint256)": {
        "notice": "inheritdoc IERC721Metadata"
      },
      "totalSupply()": {
        "notice": "get total token supply"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "transfer token between given addresses, without checking for ERC721Receiver implementation if applicable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}